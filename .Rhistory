pal(1)
pal(seq(0,1, len = 6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb <- function(variables) {
}
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal((3, "BuGn"))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(hwy, data = mpg, facets = drv~.., binwdith = 2)
qplot(hwy, data = mpg, facets = drv ~ . ., binwdith = 2)
plot(hwy, data = mpg, facets = drv ~ ., binwdith = 2)
qplot(hwy, data = mpg, facets = drv ~ . ., binwdith = 2)
qplot(hwy, data = mpg, facets = drv ~ . , binwdith = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = .5)
g + geom_point(size = 4, alpha = .5, aes(color = drv))
g + geom_point(aes(color = drv), labs(title = "Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!")+ labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = .5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", and ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
swirl()
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min(distTmp))
apply(distTmp, 2, which.min(x))
apply(distTmp, 2, which.min
)
points(x, y, pch = 19 cex = 2, col = cols1[newClust])
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, cex = 3, lwd =3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, cex = 3, lwd =3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu *diag*t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd$u %*% svd1$d %*% svd1$v
a1 <- (svd$u %*% svd1$d) %*% svd1$v
a1 <- (svd$u[,1] %*% svd1$d[,1]) %*% svd1$v[,1]
a1
a1 <- 1
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(tail(ssd, 2))
names(ssd[562:563])
table(ssd$subject)
sum(table)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],sub1[,"maxCon"])
)
mdist <- dist(c(sub1[,10:12], sub1[,"maxCon"]))
mdist <- dist(sub1[,c(10:12,"maxCon")])
mdist <- dist(sub1[,c(10:12, sub1$maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-(11:12)], centers = 6)
kClust <- kmeans(sub1[,1:10], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
0
info()
bye()
library(swirl)
swirl()
names(pm0) <- make.names()
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
names(pm0) <- make.names(cnames[1][wcol])
head(pm0)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
names(pm0)
cnames[wcol]
cnames
cnames[c(wcol)]
cnames[c(wcol),]
cnames[,c(wcol)]
cnames[,wcol]
cnames
cnames[[1]]
cnames
make.names(cnames[[1]])
cnames[[1]]
wcol
as.vector(wcol)
x0 <- pm0$Sample.Value
info()
play()
main)
main()
nxt()
main()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 <0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.code == 36 & county.site %in% both)
cnt0 <- subset(pm0, (State.code == 36 & county.site %in% both))
cnt0 <- subset(pm0, (State.code == 36 & both %in% county.site))
cnt0
cnt0 <- subset(pm0, (State.Code == 36 & county.site %in% both))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code = 63 & Site.ID = 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub, na.rm = TRUE),lwd = 2)
abline(h =median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h =median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <0 with(pm01, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <1 with(pm01, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm01, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set = "state")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
install.packages(knitr)
install.packages("knitr")
install.packages("latex"
)
install.packages("LaTex")
#set working directory
setwd("~/Desktop/DataScienceSpecialization/Course5/RepData_PeerAssessment1")
library(lubridate)
library(ggplot2)
library("data.table")
# Read data into R
activity <- read.csv("activity.csv")
activity <- data.table(activity)
# Clean up date, times, intervals
activity$date <- ymd(activity$date)
activity$time <- make_datetime(year = year(activity$date), month = month(activity$date),
day = day(activity$date),
hour = ((activity$interval %/% 10^2) %% 10^2),
min = ((activity$interval %/% 10^0) %% 10^2))
# What is mean total number of steps taken per day?
steps_day <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
# Histogram of the total number of steps taken each day
qplot(steps_day, xlab = "Daily Steps", ylab = "Frequency", binwidth = 500)
# Calculate and report the mean and median of the total number of steps taken per day
steps_dayMean <- mean(steps_day, na.rm = TRUE)
print(steps_dayMean)
steps_dayMedian <- median(steps_day, na.rm = TRUE)
print(steps_dayMedian)
# What is the average daily activity pattern?
steps_interval <- aggregate(x = list(avg_steps = activity$steps), by = list(interval = activity$interval), FUN=mean, na.rm=TRUE)
# Make a time series plot (type = "1") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all days (y-axis)
ggplot(data = steps_interval, aes(x = interval, y = avg_steps)) +
geom_line() +
xlab("5-minute Interval") +
ylab("Average Number of Steps Taken")
# Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
max_steps <- which.max(steps_interval$avg_steps)
max_steps_time <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", steps_interval[max_steps,'interval'])
print(paste0("Most steps at time interval: ", max_steps_time))
# Calculate and report the total number of missing values in the dataset
na_num <- length(which(is.na(activity$steps)))
print(paste0("Number of missing values: ", na_num))
# Strategy for missing values: set them as mean of that respective 5 minute interval
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
activity2 <- activity
for(i in 1:nrow(activity2)){
if(is.na(activity2$steps[i]) == TRUE) {
activity2$steps[i] <- steps_interval[activity2$interval[i] == steps_interval$interval,]$avg_steps
}
}
# Make a histogram of the total number of steps taken each day (using activity_imputed)
steps_day2 <- tapply(activity2$steps, activity2$date, sum)
qplot(steps_day2, xlab = "Daily Steps", ylab = "Frequency", binwidth = 500)
# Calculate and report the mean and median total number of steps taken per day
# Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
steps_day2Mean <- mean(steps_day2, na.rm = TRUE)
print(steps_day2Mean)
steps_day2Median <- median(steps_day2, na.rm = TRUE)
print(steps_day2Median)
View(activity2)
activity2$day <- weekdays(as.POSIXct(activity2$date), abbreviate = FALSE)
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$day <- ifelse(
weekdays(as.POSIXct(activity2$date), abbreviate = FALSE) %in% weekday,
"weekday", "weekend")
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$daytype <- ifelse(
weekdays(as.POSIXct(activity2$date), abbreviate = FALSE) %in% weekday,
"weekday", "weekend")
# Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
max_steps <- which.max(steps_interval$avg_steps)
max_steps_time <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", steps_interval[max_steps,'interval'])
print(paste0("Most steps at time interval: ", max_steps_time))
# Calculate and report the total number of missing values in the dataset
na_num <- length(which(is.na(activity$steps)))
print(paste0("Number of missing values: ", na_num))
# Strategy for missing values: set them as mean of that respective 5 minute interval
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
activity2 <- activity
for(i in 1:nrow(activity2)){
if(is.na(activity2$steps[i]) == TRUE) {
activity2$steps[i] <- steps_interval[activity2$interval[i] == steps_interval$interval,]$avg_steps
}
}
# Make a histogram of the total number of steps taken each day (using imputed data)
steps_day2 <- tapply(activity2$steps, activity2$date, sum)
qplot(steps_day2, xlab = "Daily Steps", ylab = "Frequency", binwidth = 500)
# Calculate and report the mean and median steps taken per day (using imputed data)
steps_day2Mean <- mean(steps_day2, na.rm = TRUE)
print(steps_day2Mean)
steps_day2Median <- median(steps_day2, na.rm = TRUE)
print(steps_day2Median)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$daytype <- ifelse(
weekdays(as.POSIXct(activity2$date), abbreviate = FALSE) %in% weekday,
"weekday", "weekend")
# Time series of average steps of each 5 minute interval, by day type
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$daytype <- ifelse(
weekdays(as.POSIXct(activity2$date), abbreviate = FALSE) %in% weekday,
"weekday", "weekend")
# Time series of average steps of each 5 minute interval, by day type
steps_interval2 <- aggregate(steps ~ interval + daytype, data = activity2, mean)
ggplot(steps_interval2, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-minute Interval") +
ylab("Average Number of Steps")
#set working directory
setwd("~/Desktop/DataScienceSpecialization/Course5/RepData_PeerAssessment1")
library(lubridate)
library(ggplot2)
library("data.table")
# Read data into R
activity <- read.csv("activity.csv")
activity <- data.table(activity)
# Clean up date, times, intervals
activity$date <- ymd(activity$date)
activity$time <- make_datetime(year = year(activity$date), month = month(activity$date),
day = day(activity$date),
hour = ((activity$interval %/% 10^2) %% 10^2),
min = ((activity$interval %/% 10^0) %% 10^2))
# Total steps per day
steps_day <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
# Histogram of the total number of steps taken each day
qplot(steps_day, xlab = "Daily Steps", ylab = "Frequency", binwidth = 500)
# Calculate and report the mean and median of the total number of steps taken per day
steps_dayMean <- mean(steps_day, na.rm = TRUE)
print(steps_dayMean)
steps_dayMedian <- median(steps_day, na.rm = TRUE)
print(steps_dayMedian)
# Average daily activity pattern
steps_interval <- aggregate(x = list(avg_steps = activity$steps), by = list(interval = activity$interval), FUN=mean, na.rm=TRUE)
# Make a time series plot (type = "1") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ggplot(data = steps_interval, aes(x = interval, y = avg_steps)) +
geom_line() +
xlab("5-minute Interval") +
ylab("Average Number of Steps")
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max_steps <- which.max(steps_interval$avg_steps)
max_steps_time <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", steps_interval[max_steps,'interval'])
print(paste0("Most steps at time interval: ", max_steps_time))
# Calculate and report the total number of missing values in the dataset
na_num <- length(which(is.na(activity$steps)))
print(paste0("Number of missing values: ", na_num))
# Strategy for missing values: set them as mean of that respective 5 minute interval
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
activity2 <- activity
for(i in 1:nrow(activity2)){
if(is.na(activity2$steps[i]) == TRUE) {
activity2$steps[i] <- steps_interval[activity2$interval[i] == steps_interval$interval,]$avg_steps
}
}
# Make a histogram of the total number of steps taken each day (using imputed data)
steps_day2 <- tapply(activity2$steps, activity2$date, sum)
qplot(steps_day2, xlab = "Daily Steps", ylab = "Frequency", binwidth = 500)
# Calculate and report the mean and median steps taken per day (using imputed data)
steps_day2Mean <- mean(steps_day2, na.rm = TRUE)
print(steps_day2Mean)
steps_day2Median <- median(steps_day2, na.rm = TRUE)
print(steps_day2Median)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity2$daytype <- ifelse(
weekdays(as.POSIXct(activity2$date), abbreviate = FALSE) %in% weekday,
"weekday", "weekend")
# Time series of average steps of each 5 minute interval, by day type
steps_interval2 <- aggregate(steps ~ interval + daytype, data = activity2, mean)
ggplot(steps_interval2, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-minute Interval") +
ylab("Average Number of Steps")
